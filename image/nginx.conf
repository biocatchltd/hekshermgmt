user nginx;
daemon off;
worker_processes  2;
pid /var/run/nginx.pid;
error_log  /var/log/nginx/nginx_error.log warn;

worker_rlimit_nofile 16384;

events {
    worker_connections  10000;
}

http {

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main buffer=128 flush=1m;
  # faster than read() + write()
  sendfile on;

  # send headers in one piece, it is better than sending them one by one
  tcp_nopush on;

  # don't buffer data sent, good for small data bursts in real time
  tcp_nodelay on;
  upstream asgi {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response (in case the Unicorn master nukes a
    # single worker for timing out).
    server unix:/tmp/asgi.sock fail_timeout=0;
  }

  server {

    server_name _;

    location /api {
        try_files $uri @app;
    }

    location @app {
        client_max_body_size        5m;
        client_body_buffer_size     128k;
        proxy_ignore_client_abort on;
        proxy_connect_timeout       300;
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
        send_timeout                300;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_buffering off;
        proxy_pass http://asgi;
    }

    location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
        include  /etc/nginx/mime.types;
    }
  }

}